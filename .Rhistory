nonspam.data <- splitted.data[1]
spam.data <- splitted.data[2]
# get the feature matrices out of the data set (i.e. remove the last column which represents class label)
nonspam.features <- nonspam.data[,1:12]
spam.features <- spam.data[,1:12]
#!/usr/bin/env Rscript
setwd("/home/xuanshen/COMP307/2016/Assignments/assig3/part1")
args <- c("1","2","3","4","5","./spamLabelled.dat","spamUnlabelled.dat")
# args <- commandArgs()
# set the smooth rate for dealing with zero counts
smooth.rate = 1
# read the training set
training.set <- read.table(args[6], header = FALSE, sep = "")
test.set <- read.table(args[7], header = FALSE, sep = "")
# get the total number of the instances in the training set and number of instances for each class
number.total <- nrow(training.set)
number.spam <- sum(training.set[,ncol(training.set)])
number.nonspam <- number.total - number.spam
# calculate the priors
prior.spam <- number.spam / number.total
prior.nonspam <- number.nonspam / number.total
# split the data into two matrices based on the class label
splitted.data <- split(training.set, training.set$V13)
nonspam.data <- splitted.data[1]
nonspam.data
nonspam.data <- splitted.data[[1]]
nonspam.data
#!/usr/bin/env Rscript
setwd("/home/xuanshen/COMP307/2016/Assignments/assig3/part1")
args <- c("1","2","3","4","5","./spamLabelled.dat","spamUnlabelled.dat")
# args <- commandArgs()
# set the smooth rate for dealing with zero counts
smooth.rate = 1
# read the training set
training.set <- read.table(args[6], header = FALSE, sep = "")
test.set <- read.table(args[7], header = FALSE, sep = "")
# get the total number of the instances in the training set and number of instances for each class
number.total <- nrow(training.set)
number.spam <- sum(training.set[,ncol(training.set)])
number.nonspam <- number.total - number.spam
# calculate the priors
prior.spam <- number.spam / number.total
prior.nonspam <- number.nonspam / number.total
# split the data into two matrices based on the class label
splitted.data <- split(training.set, training.set$V13)
nonspam.data <- splitted.data[[1]]
spam.data <- splitted.data[[2]]
# get the feature matrices out of the data set (i.e. remove the last column which represents class label)
nonspam.features <- nonspam.data[,1:12]
spam.features <- spam.data[,1:12]
colSums(spam.features)
colSums(spam.features) / number.spam
colSums(spam.features) + smooth.rate
#!/usr/bin/env Rscript
setwd("/home/xuanshen/COMP307/2016/Assignments/assig3/part1")
args <- c("1","2","3","4","5","./spamLabelled.dat","spamUnlabelled.dat")
# args <- commandArgs()
# set the smooth rate for dealing with zero counts
smooth.rate = 1
# read the training set
training.set <- read.table(args[6], header = FALSE, sep = "")
test.set <- read.table(args[7], header = FALSE, sep = "")
# get the total number of the instances in the training set and number of instances for each class
number.total <- nrow(training.set)
number.spam <- sum(training.set[,ncol(training.set)])
number.nonspam <- number.total - number.spam
# calculate the priors
prior.spam <- number.spam / number.total
prior.nonspam <- number.nonspam / number.total
# split the data into two matrices based on the class label
splitted.data <- split(training.set, training.set$V13)
nonspam.data <- splitted.data[[1]]
spam.data <- splitted.data[[2]]
# get the feature matrices out of the data set (i.e. remove the last column which represents class label)
nonspam.features <- nonspam.data[,1:12]
spam.features <- spam.data[,1:12]
# conditional probabilities
probs.one.spam <- colSums(spam.features) / number.spam
probs.zero.spam <- 1 - probs.one.spam
probs.one.nonspam <- colSums(nonspam.features) / number.nonspam
probs.zero.nonspam <- 1 - probs.one.nonspam
probs.one.spam
probs.zero.spam
probs.one.nonspam
probs.zero.nonspam
setwd("/home/xuanshen/COMP307/2016/Assignments/assig3/part1")
args <- c("1","2","3","4","5","./spamLabelled.dat","spamUnlabelled.dat")
# args <- commandArgs()
# set the smooth rate for dealing with zero counts
smooth.rate = 1
# read the training set
training.set <- read.table(args[6], header = FALSE, sep = "")
# get the total number of the instances in the training set and number of instances for each class
number.total <- nrow(training.set)
number.spam <- sum(training.set[,ncol(training.set)])
number.nonspam <- number.total - number.spam
# calculate the priors
prior.spam <- number.spam / number.total
prior.nonspam <- number.nonspam / number.total
# split the data into two matrices based on the class label
splitted.data <- split(training.set, training.set$V13)
nonspam.data <- splitted.data[[1]]
spam.data <- splitted.data[[2]]
# get the feature matrices out of the data set (i.e. remove the last column which represents class label)
nonspam.features <- nonspam.data[,1:12]
spam.features <- spam.data[,1:12]
# conditional probabilities
probs.one.spam <- colSums(spam.features) / number.spam
probs.zero.spam <- 1 - probs.one.spam
probs.one.nonspam <- colSums(nonspam.features) / number.nonspam
probs.zero.nonspam <- 1 - probs.one.nonspam
## start testing
# read the test set
test.set <- read.table(args[7], header = FALSE, sep = "")
test.set
test.set[1]
test.set[,1]
test.set[1:1]
test.set[1:1][1]
test.set[1:1][2]
test.set[2:2]
head(test.set,1)
head(test.set,1)[1]
head(test.set,1)[2]
true == 1
True == 1
if (true) {}
if (True) {}
if (1) {}
if (1) {"a"}
if (2) {"a"}
if (0) {"a"}
probs.one.spam[1]
probs.one.spam[2]
prob.given.spam <- function(feature.index, value) {
return if (value) probs.one.spam[feature.index] else probs.zero.spam[feature.index]
}
prob.given.nonspam <- function(feature.index, value) {
return if (value) probs.one.nonspam[feature.index] else probs.zero.nonspam[feature.index]
}
prob.given.spam <- function(feature.index, value) {
return if (value) probs.one.spam[feature.index] else probs.zero.spam[feature.index]
}
prob.given.nonspam <- function(feature.index, value) {
return if (value) probs.one.nonspam[feature.index] else probs.zero.nonspam[feature.index]
}
prob.given.spam <- function(feature.index, value) {
prob <- if (value) probs.one.spam[feature.index] else probs.zero.spam[feature.index]
return(prob)
}
prob.given.nonspam <- function(feature.index, value) {
prob <- if (value) probs.one.nonspam[feature.index] else probs.zero.nonspam[feature.index]
return(prob)
}
prob.given.spam <- function(feature.index, value) {
return (if (value) probs.one.spam[feature.index] else probs.zero.spam[feature.index])
#return(prob)
}
prob.given.spam <- function(feature.index, value) {
return (if (value) probs.one.spam[feature.index] else probs.zero.spam[feature.index])
}
prob.given.nonspam <- function(feature.index, value) {
return (if (value) probs.one.nonspam[feature.index] else probs.zero.nonspam[feature.index])
}
setwd("/home/xuanshen/COMP307/2016/Assignments/assig3/part1")
args <- c("1","2","3","4","5","./spamLabelled.dat","spamUnlabelled.dat")
# args <- commandArgs()
# set the smooth rate for dealing with zero counts
smooth.rate = 1
# read the training set
training.set <- read.table(args[6], header = FALSE, sep = "")
# get the total number of the instances in the training set and number of instances for each class
number.total <- nrow(training.set)
number.spam <- sum(training.set[,ncol(training.set)])
number.nonspam <- number.total - number.spam
# calculate the priors
prior.spam <- number.spam / number.total
prior.nonspam <- number.nonspam / number.total
# split the data into two matrices based on the class label
splitted.data <- split(training.set, training.set$V13)
nonspam.data <- splitted.data[[1]]
spam.data <- splitted.data[[2]]
# get the feature matrices out of the data set (i.e. remove the last column which represents class label)
nonspam.features <- nonspam.data[,1:12]
spam.features <- spam.data[,1:12]
# conditional probabilities
probs.one.spam <- colSums(spam.features) / number.spam
probs.zero.spam <- 1 - probs.one.spam
probs.one.nonspam <- colSums(nonspam.features) / number.nonspam
probs.zero.nonspam <- 1 - probs.one.nonspam
## start testing
# read the test set
test.set <- read.table(args[7], header = FALSE, sep = "")
for (instance in test.set) {
instance
}
test.set
for (i in test.set) {}
for (i in test.set) {
i
}
for (i in 1:10) {i}
for (i in 1:10) {print(i)}
test.set
for (instance in test.set) {print(instance)}
for (instance in test.set[]) {print(instance)}
test.set
test.set[1]
test.set[,1]
test.set[1:1]
head(test.set, 10)
test.set[1,]
test.set[1,]
for (instance in test.set[,]) {print(instance)}
for (i in test.set[1,]) {print(i)}
prob.given.spam <- function(instance) {
prob <- prob.spam
i <- 1
for (feature in instance) {
prob *= if (feature) probs.one.spam[i] else probs.zero.spam[i]
i++
}
return (prob)
}
prob.given.spam <- function(instance) {
prob <- prob.spam
i <- 1
for (feature in instance) {
prob *= if (feature) probs.one.spam[i] else probs.zero.spam[i]
i <- i + 1
}
return (prob)
}
prob.given.spam <- function(instance) {
prob <- prob.spam
i <- 1
for (feature in instance) {
prob = prob * if (feature) probs.one.spam[i] else probs.zero.spam[i]
i <- i + 1
}
return (prob)
}
prob.given.spam <- function(instance) {
prob <- prob.spam
i <- 1
for (feature in instance) {
prob = prob * if (feature) probs.one.spam[i] else probs.zero.spam[i]
i++
}
return (prob)
}
?applu
?apply
setwd("/home/xuanshen/COMP307/2016/Assignments/assig3/part1")
args <- c("1","2","3","4","5","./spamLabelled.dat","spamUnlabelled.dat")
# args <- commandArgs()
# set the smooth rate for dealing with zero counts
smooth.rate = 1
# read the training set
training.set <- read.table(args[6], header = FALSE, sep = "")
# get the total number of the instances in the training set and number of instances for each class
number.total <- nrow(training.set)
number.spam <- sum(training.set[,ncol(training.set)])
number.nonspam <- number.total - number.spam
# calculate the priors
prior.spam <- number.spam / number.total
prior.nonspam <- number.nonspam / number.total
# split the data into two matrices based on the class label
splitted.data <- split(training.set, training.set$V13)
nonspam.data <- splitted.data[[1]]
spam.data <- splitted.data[[2]]
# get the feature matrices out of the data set (i.e. remove the last column which represents class label)
nonspam.features <- nonspam.data[,1:12]
spam.features <- spam.data[,1:12]
# conditional probabilities
probs.one.spam <- colSums(spam.features) / number.spam
probs.zero.spam <- 1 - probs.one.spam
probs.one.nonspam <- colSums(nonspam.features) / number.nonspam
probs.zero.nonspam <- 1 - probs.one.nonspam
## start testing
# read the test set
test.set <- read.table(args[7], header = FALSE, sep = "")
apply(test.set, 1, prob.given.spam)
prob.given.spam <- function(instance) {
prob <- prob.spam
i <- 1
for (feature in instance) {
prob = prob * if (feature) probs.one.spam[i] else probs.zero.spam[i]
i <- i + 1
}
return (prob)
}
prob.given.nonspam <- function(instance) {
prob <- prob.nonspam
i <- 1
for (feature in instance) {
prob = prob * if (feature) probs.one.nonspam[i] else probs.zero.nonspam[i]
i <- i + 1
}
return (prob)
}
setwd("/home/xuanshen/COMP307/2016/Assignments/assig3/part1")
args <- c("1","2","3","4","5","./spamLabelled.dat","spamUnlabelled.dat")
# args <- commandArgs()
# set the smooth rate for dealing with zero counts
smooth.rate = 1
# read the training set
training.set <- read.table(args[6], header = FALSE, sep = "")
# get the total number of the instances in the training set and number of instances for each class
number.total <- nrow(training.set)
number.spam <- sum(training.set[,ncol(training.set)])
number.nonspam <- number.total - number.spam
# calculate the priors
prior.spam <- number.spam / number.total
prior.nonspam <- number.nonspam / number.total
# split the data into two matrices based on the class label
splitted.data <- split(training.set, training.set$V13)
nonspam.data <- splitted.data[[1]]
spam.data <- splitted.data[[2]]
# get the feature matrices out of the data set (i.e. remove the last column which represents class label)
nonspam.features <- nonspam.data[,1:12]
spam.features <- spam.data[,1:12]
# conditional probabilities
probs.one.spam <- colSums(spam.features) / number.spam
probs.zero.spam <- 1 - probs.one.spam
probs.one.nonspam <- colSums(nonspam.features) / number.nonspam
probs.zero.nonspam <- 1 - probs.one.nonspam
## start testing
# read the test set
test.set <- read.table(args[7], header = FALSE, sep = "")
prob.given.spam <- function(instance) {
prob <- prob.spam
i <- 1
for (feature in instance) {
prob = prob * if (feature) probs.one.spam[i] else probs.zero.spam[i]
i <- i + 1
}
return (prob)
}
prob.given.nonspam <- function(instance) {
prob <- prob.nonspam
i <- 1
for (feature in instance) {
prob = prob * if (feature) probs.one.nonspam[i] else probs.zero.nonspam[i]
i <- i + 1
}
return (prob)
}
apply(test.set, 1, prob.given.spam)
setwd("/home/xuanshen/COMP307/2016/Assignments/assig3/part1")
args <- c("1","2","3","4","5","./spamLabelled.dat","spamUnlabelled.dat")
# args <- commandArgs()
# set the smooth rate for dealing with zero counts
smooth.rate = 1
# read the training set
training.set <- read.table(args[6], header = FALSE, sep = "")
# get the total number of the instances in the training set and number of instances for each class
number.total <- nrow(training.set)
number.spam <- sum(training.set[,ncol(training.set)])
number.nonspam <- number.total - number.spam
# calculate the priors
prior.spam <- number.spam / number.total
prior.nonspam <- number.nonspam / number.total
# split the data into two matrices based on the class label
splitted.data <- split(training.set, training.set$V13)
nonspam.data <- splitted.data[[1]]
spam.data <- splitted.data[[2]]
# get the feature matrices out of the data set (i.e. remove the last column which represents class label)
nonspam.features <- nonspam.data[,1:12]
spam.features <- spam.data[,1:12]
# conditional probabilities
probs.one.spam <- colSums(spam.features) / number.spam
probs.zero.spam <- 1 - probs.one.spam
probs.one.nonspam <- colSums(nonspam.features) / number.nonspam
probs.zero.nonspam <- 1 - probs.one.nonspam
## start testing
# read the test set
test.set <- read.table(args[7], header = FALSE, sep = "")
prob.given.spam <- function(instance) {
prob <- prior.spam
i <- 1
for (feature in instance) {
prob = prob * if (feature) probs.one.spam[i] else probs.zero.spam[i]
i <- i + 1
}
return (prob)
}
prob.given.nonspam <- function(instance) {
prob <- prior.nonspam
i <- 1
for (feature in instance) {
prob = prob * if (feature) probs.one.nonspam[i] else probs.zero.nonspam[i]
i <- i + 1
}
return (prob)
}
apply(test.set, 1, prob.given.spam)
apply(test.set, 1, prob.given.nonspam)
probs.spam <- apply(test.set, 1, prob.given.spam)
probs.nonspam <- apply(test.set, 1, prob.given.nonspam)
probs.spam - probs.nonspam
a <- probs.spam - probs.nonspam
a > 0
setwd("/home/xuanshen/COMP307/2016/Assignments/assig3/part1")
args <- c("1","2","3","4","5","./spamLabelled.dat","spamUnlabelled.dat")
# args <- commandArgs()
# set the smooth rate for dealing with zero counts
smooth.rate = 1
# read the training set
training.set <- read.table(args[6], header = FALSE, sep = "")
# get the total number of the instances in the training set and number of instances for each class
number.total <- nrow(training.set)
number.spam <- sum(training.set[,ncol(training.set)])
number.nonspam <- number.total - number.spam
# calculate the priors
prior.spam <- number.spam / number.total
prior.nonspam <- number.nonspam / number.total
# split the data into two matrices based on the class label
splitted.data <- split(training.set, training.set$V13)
nonspam.data <- splitted.data[[1]]
spam.data <- splitted.data[[2]]
# get the feature matrices out of the data set (i.e. remove the last column which represents class label)
nonspam.features <- nonspam.data[,1:12]
spam.features <- spam.data[,1:12]
# conditional probabilities
probs.one.spam <- colSums(spam.features) / number.spam
probs.zero.spam <- 1 - probs.one.spam
probs.one.nonspam <- colSums(nonspam.features) / number.nonspam
probs.zero.nonspam <- 1 - probs.one.nonspam
## start testing
# read the test set
test.set <- read.table(args[7], header = FALSE, sep = "")
prob.given.spam <- function(instance) {
prob <- prior.spam
i <- 1
for (feature in instance) {
prob = prob * if (feature) probs.one.spam[i] else probs.zero.spam[i]
i <- i + 1
}
return (prob)
}
prob.given.nonspam <- function(instance) {
prob <- prior.nonspam
i <- 1
for (feature in instance) {
prob = prob * if (feature) probs.one.nonspam[i] else probs.zero.nonspam[i]
i <- i + 1
}
return (prob)
}
probs.spam <- apply(test.set, 1, prob.given.spam)
probs.nonspam <- apply(test.set, 1, prob.given.nonspam)
probs.spam - probs.nonspam > 0
#!/usr/bin/env Rscript
setwd("/home/xuanshen/COMP307/2016/Assignments/assig3/part1")
args <- c("1","2","3","4","5","./spamLabelled.dat","spamUnlabelled.dat")
# args <- commandArgs()
# set the smooth rate for dealing with zero counts
smooth.rate = 1
# read the training set
training.set <- read.table(args[6], header = FALSE, sep = "")
# get the total number of the instances in the training set and number of instances for each class
number.total <- nrow(training.set)
number.spam <- sum(training.set[,ncol(training.set)])
number.nonspam <- number.total - number.spam
# calculate the priors
prior.spam <- number.spam / number.total
prior.nonspam <- number.nonspam / number.total
# split the data into two matrices based on the class label
splitted.data <- split(training.set, training.set$V13)
nonspam.data <- splitted.data[[1]]
spam.data <- splitted.data[[2]]
# get the feature matrices out of the data set (i.e. remove the last column which represents class label)
nonspam.features <- nonspam.data[,1:12]
spam.features <- spam.data[,1:12]
# conditional probabilities
probs.one.spam <- colSums(spam.features) / number.spam
probs.zero.spam <- 1 - probs.one.spam
probs.one.nonspam <- colSums(nonspam.features) / number.nonspam
probs.zero.nonspam <- 1 - probs.one.nonspam
## start testing
# read the test set
test.set <- read.table(args[7], header = FALSE, sep = "")
prob.given.spam <- function(instance) {
prob <- prior.spam
i <- 1
for (feature in instance) {
prob = prob * if (feature) probs.one.spam[i] else probs.zero.spam[i]
i <- i + 1
}
return (prob)
}
prob.given.nonspam <- function(instance) {
prob <- prior.nonspam
i <- 1
for (feature in instance) {
prob = prob * if (feature) probs.one.nonspam[i] else probs.zero.nonspam[i]
i <- i + 1
}
return (prob)
}
probs.spam <- apply(test.set, 1, prob.given.spam)
probs.nonspam <- apply(test.set, 1, prob.given.nonspam)
results <- 1 *(probs.spam - probs.nonspam)
results
results <- probs.spam - probs.nonspam > 0
results
results * 1
probs.spam <- apply(test.set, 1, prob.given.spam)
probs.nonspam <- apply(test.set, 1, prob.given.nonspam)
results <- (probs.spam - probs.nonspam > 0) * 1
results
